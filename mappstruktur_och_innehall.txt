.
├── flake.nix
├── hosts
│   ├── laptop-intel
│   │   ├── default.nix
│   │   ├── hardware-configuration.nix
│   │   └── hyprland.nix
│   ├── laptop-nvidia
│   │   ├── default.nix
│   │   ├── hardware-configuration.nix
│   │   └── hyprland.nix
│   ├── mediaplayer
│   │   └── default.nix
│   └── workstation
│       ├── default.nix
│       └── hardware-configuration.nix
├── mappstruktur_och_innehall.txt
└── modules
    ├── common
    │   ├── base.nix
    │   └── utils.nix
    ├── desktop
    │   ├── browsers.nix
    │   ├── chat.nix
    │   ├── environment.nix
    │   ├── fonts.nix
    │   ├── hyprland-base.nix
    │   ├── hyprland.nix
    │   ├── media-creation.nix
    │   ├── mediaplayer.nix
    │   ├── nix-ld.nix
    │   ├── packages.nix
    │   ├── plymouth.nix
    │   ├── printing.nix
    │   ├── python.nix
    │   ├── slicer.nix
    │   └── theme.nix
    ├── hardware
    │   ├── amd.nix
    │   ├── base.nix
    │   ├── intel.nix
    │   ├── laptop.nix
    │   └── nvidia.nix
    ├── home
    │   ├── anders.nix
    │   ├── assets
    │   ├── config-files
    │   │   └── wallpaper_dirs.txt
    │   ├── config-files.nix
    │   ├── hyprland.nix
    │   ├── hyprpaper.nix
    │   ├── kitty.nix
    │   ├── pywal.nix
    │   ├── scripts
    │   │   ├── set-random-wallpaper.sh
    │   │   └── waybar-network-vnstat.sh
    │   ├── scripts.nix
    │   ├── waybar
    │   │   ├── config.jsonc
    │   │   ├── scripts
    │   │   │   ├── battery.sh
    │   │   │   └── resource-monitor.sh
    │   │   └── style.css
    │   └── waybar.nix
    ├── profiles
    │   ├── desktop.nix
    │   ├── mediacenter.nix
    │   ├── server.nix
    │   └── services.nix
    └── services
        ├── ollama.nix
        ├── open-webui.nix
        ├── syncthing.nix
        └── tailscale.nix

18 directories, 56 files


========================================

Filinnehåll:

----------------------------------------
#./flake.nix
----------------------------------------
#./flake.nix
{
  description = "Min familj av NixOS-maskiner";

  inputs = {
    nixpkgs.url = "github.com/nixos/nixpkgs/release-25.05";
    nixpkgs-unstable.url = "github.com/nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github.com/nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = { self, nixpkgs, nixpkgs-unstable, home-manager, ... }@inputs: {
    nixosConfigurations = {
      # Intel laptop
      laptop-intel = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; }; # <--- Behåll denna
        modules = [
          ./hosts/laptop-intel
          ./modules/common/base.nix
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            # KORRIGERING HÄR:
            # extraSpecialArgs tar emot config från den omgivande NixOS-modulen
            home-manager.extraSpecialArgs = { config, ... }: { # <--- Lägg till 'config' här
              hostName = config.networking.hostName;
              inherit inputs;
            };
            home-manager.users.anders = import ./modules/home/anders.nix;
          }
        ];
      };

      # Nvidia laptop
      laptop-nvidia = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/laptop-nvidia
          ./modules/common/base.nix
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.extraSpecialArgs = { config, ... }: { # <--- Lägg till 'config' här
              hostName = config.networking.hostName;
              inherit inputs;
            };
            home-manager.users.anders = import ./modules/home/anders.nix;
          }
        ];
      };

      # Mediaspelare
      mediaplayer = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/mediaplayer
          ./modules/common/base.nix
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.extraSpecialArgs = { config, ... }: { # <--- Lägg till 'config' här
              hostName = config.networking.hostName;
              inherit inputs;
            };
            home-manager.users.anders = import ./modules/home/anders.nix;
          }
        ];
      };

      # Workstation
      workstation = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/workstation
          ./modules/common/base.nix
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.extraSpecialArgs = { config, ... }: { # <--- Lägg till 'config' här
              hostName = config.networking.hostName;
              inherit inputs;
            };
            home-manager.users.anders = import ./modules/home/anders.nix;
          }
        ];
      };
    };
  };
}

----------------------------------------
#./hosts/mediaplayer/default.nix
----------------------------------------
{ pkgs, inputs, ... }:

{
  imports = [
    ./hardware-configuration.nix
    ../../modules/hardware/amd.nix
    ../../modules/common/base.nix
    ../../modules/profiles/mediacenter.nix # Minimal profil
    ../../modules/profiles/server.nix     # För SSH
  ];

  # Unika inställningar
  networking.hostName = "mediaplayer";
  console.keyMap = "sv-latin1";

  # Bootloader
  boot.loader = {
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
  };

  # Overlay för instabila paket
  nixpkgs.overlays = [
    (final: prev: {
      unstable = import inputs.nixpkgs-unstable {
        system = prev.system;
        config.allowUnfree = true;
      };
    })
  ];

  system.stateVersion = "25.05";
}

----------------------------------------
#./hosts/laptop-intel/hardware-configuration.nix
----------------------------------------
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "usbhid" "sdhci_pci" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/60c9ddfa-696e-48e6-b8b0-4c5d7d41ecb2";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."root".device = "/dev/disk/by-uuid/d3fe9d1c-c4f8-4291-a206-aea1b6b04c18";

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/0E22-7E45";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlan0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}


----------------------------------------
#./hosts/laptop-intel/default.nix
----------------------------------------
{ pkgs, inputs, ... }:
{
  imports = [
    ./hardware-configuration.nix
    ../../modules/hardware/intel.nix
    ../../modules/common/base.nix
    ../../modules/common/utils.nix
    ../../modules/profiles/desktop.nix
    ../../modules/profiles/services.nix
    ../../modules/services/ollama.nix
    ../../modules/services/open-webui.nix
    ./hyprland.nix
  ];
 
  # Unika inställningar för denna dator
  networking.hostName = "laptop-intel";
  console.keyMap = "sv-latin1";

  # LUKS och Bootloader
  boot = {
    loader = {
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
    };
  };

  # Overlay för instabila paket
  nixpkgs.overlays = [
    (final: prev: {
      unstable = import inputs.nixpkgs-unstable {
        system = prev.system;
        config.allowUnfree = true;
      };
    })
  ];

  system.stateVersion = "25.05";
}

----------------------------------------
#./hosts/laptop-intel/hyprland.nix
----------------------------------------
# Plats: hosts/laptop-intel/hyprland.nix
{ pkgs, config, ... }: # Lägg till 'config' här

let
  # Definiera den host-specifika Hyprland-konfigurationen som en sträng
  hyprlandHostConfig = pkgs.lib.strings.concatStringsSep "\n" [
    "# Denna fil hanteras av NixOS. Ändra inte manuellt."
    "# Host-specifika Hyprland-inställningar för laptop-intel"
    ""
    "# MONITORS (Laptop Intel)"
    "monitor= eDP-1, 1920x1080, 0x0, 1"
    ""
    "# AUTOSTART (Laptop Intel)"
    "exec-once = waybar"
    "exec-once = hyprpaper"
    "exec-once = hypridle"
    "exec-once = set-random-wallpaper"
    "exec-once = trayscale --hide-window"
    "# exec-once = /home/anders/.config/Scripts/battery-notify"
    "exec-once = hyprctl setcursor Adwaita 24"
    ""
    "# Multimedia keys (Laptop Intel)"
    "bindel = ,XF86AudioRaiseVolume, exec, ${pkgs.wireplumber}/bin/wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+"
    "bindel = ,XF86AudioLowerVolume, exec, ${pkgs.wireplumber}/bin/wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-"
    "bindel = ,XF86AudioMute, exec, ${pkgs.wireplumber}/bin/wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
    "bindel = ,XF86AudioMicMute, exec, ${pkgs.wireplumber}/bin/wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
    "bindel = ,XF86MonBrightnessUp, exec, ${pkgs.brightnessctl}/bin/brightnessctl s 10%+"
    "bindel = ,XF86MonBrightnessDown, exec, ${pkgs.brightnessctl}/bin/brightnessctl s 10%-"
    "bindl = , XF86AudioNext, exec, ${pkgs.playerctl}/bin/playerctl next"
    "bindl = , XF86AudioPause, exec, ${pkgs.playerctl}/bin/playerctl play-pause"
    "bindl = , XF86AudioPlay, exec, ${pkgs.playerctl}/bin/playerctl play-pause"
    "bindl = , XF86AudioPrev, exec, ${pkgs.playerctl}/bin/playerctl previous"
  ];
in
{
  imports = [
    ../../modules/desktop/hyprland-base.nix
  ];

  # Skriv den host-specifika konfigurationen till /etc/hypr/hyprland-laptop-intel.conf
  environment.etc."hypr/hyprland-${config.networking.hostName}.conf".text = hyprlandHostConfig;
}

----------------------------------------
#./hosts/workstation/hardware-configuration.nix
----------------------------------------
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/11dee4ab-51c5-4ee9-998f-042b7be5e1cd";
      fsType = "btrfs";
      options = [ "subvol=rootfs" ];
    };

  fileSystems."/nix" =
    { device = "/dev/disk/by-uuid/11dee4ab-51c5-4ee9-998f-042b7be5e1cd";
      fsType = "btrfs";
      options = [ "subvol=nix" ];
    };

  fileSystems."/partition-root" =
    { device = "/dev/disk/by-uuid/11dee4ab-51c5-4ee9-998f-042b7be5e1cd";
      fsType = "btrfs";
    };

  fileSystems."/.swapvol" =
    { device = "/dev/disk/by-uuid/11dee4ab-51c5-4ee9-998f-042b7be5e1cd";
      fsType = "btrfs";
      options = [ "subvol=swap" ];
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/11dee4ab-51c5-4ee9-998f-042b7be5e1cd";
      fsType = "btrfs";
      options = [ "subvol=home" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/E9E8-5700";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.virbr0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp4s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}


----------------------------------------
#./hosts/workstation/default.nix
----------------------------------------
{ pkgs, inputs, ... }:

{
  imports = [
    ./hardware-configuration.nix
    ../../modules/hardware/nvidia.nix
    ../../modules/common/base.nix
    ../../modules/common/utils.nix
    ../../modules/profiles/desktop.nix
    ../../modules/profiles/services.nix
    ../../modules/profiles/server.nix     # För SSH
  ];

  # Unika inställningar
  networking.hostName = "workstation";
  console.keyMap = "sv-latin1";

  # Bootloader (utan LUKS, vilket är vanligt för en stationär dator)
  boot.loader = {
    systemd-boot.enable = true;
    efi.canTouchEfiVariables = true;
  };

  # Overlay för instabila paket
  nixpkgs.overlays = [
    (final: prev: {
      unstable = import inputs.nixpkgs-unstable {
        system = prev.system;
        config.allowUnfree = true;
      };
    })
  ];

  system.stateVersion = "25.05";
}

----------------------------------------
#./hosts/laptop-nvidia/hardware-configuration.nix
----------------------------------------
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/2dcc969a-2b4e-4199-ad3e-96dae69d0c87";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."cryptroot".device = "/dev/disk/by-uuid/e134c6ee-5243-4baf-9609-58f23cce4513";

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/0AA9-8FE9";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}


----------------------------------------
#./hosts/laptop-nvidia/default.nix
----------------------------------------
{ pkgs, inputs, ... }:
{
  imports = [
    ./hardware-configuration.nix
    ../../modules/hardware/nvidia.nix
    ../../modules/hardware/intel.nix
    ../../modules/common/base.nix
    ../../modules/common/utils.nix
    ../../modules/profiles/desktop.nix
    ../../modules/profiles/services.nix
    ./hyprland.nix
  ];

  # Unika inställningar
  networking.hostName = "laptop-nvidia";
  console.keyMap = "sv-latin1";

  # LUKS och Bootloader
  boot = {
    loader = {
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
    };
  };

  # Overlay för instabila paket
  nixpkgs.overlays = [
    (final: prev: {
      unstable = import inputs.nixpkgs-unstable {
        system = prev.system;
        config.allowUnfree = true;
      };
    })
  ];

  system.stateVersion = "25.05";
}

----------------------------------------
#./hosts/laptop-nvidia/hyprland.nix
----------------------------------------
# Plats: hosts/laptop-intel/hyprland.nix
{ pkgs, config, ... }: # Lägg till 'config' här

let
  # Definiera den host-specifika Hyprland-konfigurationen som en sträng
  hyprlandHostConfig = pkgs.lib.strings.concatStringsSep "\n" [
    "# Denna fil hanteras av NixOS. Ändra inte manuellt."
    "# Host-specifika Hyprland-inställningar för laptop-intel"
    ""
    "# MONITORS (Laptop Intel)"
    "monitor= eDP-1, 1920x1080, 0x0, 1"
    ""
    "# AUTOSTART (Laptop Intel)"
    "exec-once = waybar"
    "exec-once = hyprpaper"
    "exec-once = hypridle"
    "exec-once = set-random-wallpaper"
    "exec-once = trayscale --hide-window"
    "# exec-once = /home/anders/.config/Scripts/battery-notify"
    "exec-once = hyprctl setcursor Adwaita 24"
    ""
    "# Multimedia keys (Laptop Intel)"
    "bindel = ,XF86AudioRaiseVolume, exec, ${pkgs.wireplumber}/bin/wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+"
    "bindel = ,XF86AudioLowerVolume, exec, ${pkgs.wireplumber}/bin/wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-"
    "bindel = ,XF86AudioMute, exec, ${pkgs.wireplumber}/bin/wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
    "bindel = ,XF86AudioMicMute, exec, ${pkgs.wireplumber}/bin/wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
    "bindel = ,XF86MonBrightnessUp, exec, ${pkgs.brightnessctl}/bin/brightnessctl s 10%+"
    "bindel = ,XF86MonBrightnessDown, exec, ${pkgs.brightnessctl}/bin/brightnessctl s 10%-"
    "bindl = , XF86AudioNext, exec, ${pkgs.playerctl}/bin/playerctl next"
    "bindl = , XF86AudioPause, exec, ${pkgs.playerctl}/bin/playerctl play-pause"
    "bindl = , XF86AudioPlay, exec, ${pkgs.playerctl}/bin/playerctl play-pause"
    "bindl = , XF86AudioPrev, exec, ${pkgs.playerctl}/bin/playerctl previous"
  ];
in
{
  imports = [
    ../../modules/desktop/hyprland-base.nix
  ];

  # Skriv den host-specifika konfigurationen till /etc/hypr/hyprland-laptop-intel.conf
  environment.etc."hypr/hyprland-${config.networking.hostName}.conf".text = hyprlandHostConfig;
}

----------------------------------------
#./modules/home/waybar/config.jsonc
----------------------------------------
{
    "env": {
        "PATH": "/home/anders/.local/bin:/home/anders/.nix-profile/bin:/run/current-system/sw/bin:/usr/bin:/bin"
    },

    "layer": "top",
    "modules-left": ["hyprland/workspaces"],
    "modules-center": ["clock", "idle_inhibitor"],
    "modules-right": ["custom/resource-monitor", "bluetooth", "custom/network-vnstat", "tray", "pulseaudio", "custom/battery" ],


    "idle_inhibitor": {
    "format": "{icon}",
    "format-icons": {
        "activated": "",
        "deactivated": ""
        }
    },

    "clock": {
        "interval": 60,
        "tooltip": true,
        "format": "{:%H.%M}",
        "tooltip-format": "{:%Y-%m-%d}"
    },

    "custom/resource-monitor": {
        "exec": "~/nixos-config/modules/home/waybar/scripts/resource-monitor.sh",
        "format": "{text}",
        "return-type": "json",
        "interval": 5
    },

    "bluetooth": {
        "format": "",
        "format-disabled": "󰂲",
        "format-connected": "",
        "tooltip-format": "Devices connected: {num_connections}",
        "on-click": "kitty --class=bluetui -e bluetui"
    },

    "custom/network-vnstat": {
        "exec": "/home/anders/.local/bin/waybar-network-vnstat",
        "format": "{text}",
        "return-type": "json",
        "interval": 5,
        "on-click": "kitty --class=Impala -e impala"
    },

    "pulseaudio": {
        "format": "{icon}",
        "on-click": "alacritty --class=Wiremix -e wiremix",
        "on-click-right": "pamixer -t",
        "tooltip-format": "Playing at {volume}%",
        "scroll-step": 5,
        "format-muted": "󰝟",
        "format-icons": {
        "default": ["", "", ""]
        }
    },

    "custom/battery": {
        "exec": "~/nixos-config/modules/home/waybar/scripts/battery.sh",
        "format": "{text}",
        "return-type": "json",
        "interval": 30
    }

}



----------------------------------------
#./modules/home/waybar/style.css
----------------------------------------
/* ~/.config/waybar/style.css */
@import url("/home/anders/.cache/waybar-color.css");

/* Statusfältet */
#waybar {
    background: transparent;
    font-family: "JetBrains Mono", "Font Awesome 6 Free", sans-serif;
    font-size: 13px;
    padding: 0 8px;
}


#tray,
#clock,
#idle_inhibitor,
#custom-resource-monitor,
#custom-network-vnstat,
#bluetooth,
#pulseaudio,
#custom-battery{
  min-width: 12px;
  margin: 0 7.5px;
}

#custom-battery,
#custom-network-vnstat,
#custom-battery {
  font-family: "JetBrains Mono Nerd Fonts", Arial, sans-serif;
}

tooltip {
  padding: 2px;
}

#custom-resource-monitor.fa-icon {
  font-family: "Font Awesome 6 Free";
  font-weight: 900; /* Solid variant */
}

----------------------------------------
#./modules/home/waybar/scripts/resource-monitor.sh
----------------------------------------
#!/usr/bin/env bash

# --- Ikoner (kräver Nerd Fonts) ---
ICON_CPU=""
ICON_MEM="\uefc5 "
ICON_GPU="﬙"
ICON_TEMP=""
ICON_FAN=""
ICON_DISK=""

# --- Funktioner för att hämta data ---

get_cpu_usage() {
    cpu_idle=$(LC_ALL=C mpstat 1 1 | awk '/Average/ {print $12}')
    cpu_usage=$(echo "scale=0; (100 - $cpu_idle) / 1" | bc)
    echo "$cpu_usage"
}

get_mem_usage() {
    awk '
        /MemTotal/ {total=$2}
        /MemAvailable/ {available=$2}
        END {
            if (total > 0) {
                used = total - available
                printf "%.0f", (used / total) * 100
            } else {
                print "0"
            }
        }
    ' /proc/meminfo
}

get_gpu_usage() {
    if command -v nvidia-smi &> /dev/null; then
        gpu_usage=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits | awk '{print $1}')
        echo "$gpu_usage"
    elif [ -f /sys/class/drm/card0/device/gpu_busy_percent ]; then
        gpu_usage=$(cat /sys/class/drm/card0/device/gpu_busy_percent)
        echo "$gpu_usage"
    else
        echo "N/A"
    fi
}

get_cpu_temp() {
    cpu_temp=$(sensors | grep 'Package id 0' | awk '{print $4}' | sed 's/+//;s/°C//')
    echo "$cpu_temp"
}

# KORRIGERAD FUNKTION: Hanterar system med flera sensorer (hwmon*) korrekt.
get_gpu_temp() {
    if command -v nvidia-smi &> /dev/null; then
        gpu_temp=$(nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits)
        echo "$gpu_temp"
    # Skapar en array 'files' av alla matchande sökvägar.
    # Kollar sedan om det första elementet i arrayen är en giltig fil.
    elif files=(/sys/class/hwmon/hwmon*/temp1_input); [[ -f "${files[0]}" ]]; then
        # Läser endast från den FÖRSTA filen som hittades.
        gpu_temp=$(cat "${files[0]}" | awk '{print $1/1000}')
        echo "$gpu_temp"
    else
        echo "N/A"
    fi
}

get_fan_speed() {
    fan_speed=$(sensors | grep -i 'fan' | awk '{print $2}' | head -n1)
    if [[ -n "$fan_speed" ]]; then
        echo "$fan_speed RPM"
    else
        echo "N/A"
    fi
}

get_disk_usage() {
    df -kP / | awk 'NR==2 {
        pcent = $5;
        used_gb = $3 / 1024 / 1024;
        total_gb = $2 / 1024 / 1024;
        printf "%s (%.1fG/%.1fG)", pcent, used_gb, total_gb
    }'
}

# --- Huvudlogik ---

# Hämta all data
CPU_USAGE=$(get_cpu_usage)
MEM_USAGE=$(get_mem_usage)
GPU_USAGE=$(get_gpu_usage)
CPU_TEMP=$(get_cpu_temp)
GPU_TEMP=$(get_gpu_temp)
FAN_SPEED=$(get_fan_speed)
DISK_USAGE=$(get_disk_usage)

# Bestäm vilken resurs som är mest stressad
max_usage=$CPU_USAGE
icon=$ICON_CPU

if [[ "$(echo "$MEM_USAGE > $max_usage" | bc -l)" == "1" ]]; then
    max_usage=$MEM_USAGE
    icon=$ICON_MEM
fi

if [[ "$GPU_USAGE" != "N/A" && "$(echo "$GPU_USAGE > $max_usage" | bc -l)" == "1" ]]; then
    icon=$ICON_GPU
fi

# Skapa tooltip-text
TOOLTIP="$ICON_CPU CPU: $CPU_USAGE% ($CPU_TEMP°C)\n"
TOOLTIP+="$ICON_MEM Minne: $MEM_USAGE%\n"
if [[ "$GPU_USAGE" != "N/A" ]]; then
    TOOLTIP+="$ICON_GPU GPU: $GPU_USAGE% ($GPU_TEMP°C)\n"
fi
TOOLTIP+="$ICON_FAN Fläkt: $FAN_SPEED\n"
TOOLTIP+="$ICON_DISK SSD: $DISK_USAGE"

# Skriv ut JSON för Waybar
printf '{"text": "%s", "tooltip": "%s"}\n' "$icon" "$TOOLTIP"

----------------------------------------
#./modules/home/waybar/scripts/battery.sh
----------------------------------------
#!/usr/bin/env bash

# Hitta det första batteriet
BATTERY_PATH=$(find /sys/class/power_supply/ -name 'BAT*' | head -n 1)

if [ -z "$BATTERY_PATH" ]; then
    printf '{"text": " N/A", "tooltip": "Inget batteri hittades", "class": "critical"}\n'
    exit 0
fi

# Hämta grundläggande information
capacity=$(cat "${BATTERY_PATH}/capacity")
status=$(cat "${BATTERY_PATH}/status")

# --- NERD FONT IKONER ---
ICON_CHARGING=''
ICON_FULL=''
ICON_EMPTY=''
ICON_HALF=''
ICON_QUARTER=''
ICON_THREE_QUARTERS=''
ICON_PLUGGED=''

# --- LOGIK FÖR IKONER OCH KLASSER ---
# (Denna del är oförändrad)
if [[ "$status" = "Charging" ]]; then
    icon=$ICON_CHARGING
    class="charging"
elif [[ "$status" = "Full" || ("$status" = "Not charging" && "$capacity" -eq 100) ]]; then
    icon=$ICON_FULL
    class="full"
else
    class="discharging"
    if [[ "$capacity" -le 10 ]]; then
        icon=$ICON_EMPTY
        class="critical"
    elif [[ "$capacity" -le 35 ]]; then
        icon=$ICON_QUARTER
        class="warning"
    elif [[ "$capacity" -le 65 ]]; then
        icon=$ICON_HALF
    elif [[ "$capacity" -le 90 ]]; then
        icon=$ICON_THREE_QUARTERS
    else
        icon=$ICON_FULL
    fi
    if [[ "$status" = "Not charging" ]]; then
        icon=$ICON_PLUGGED
    fi
fi

# --- FÖRBÄTTRAD LOGIK FÖR STRÖMFÖRBRUKNING OCH TOOLTIP ---
upower_info=$(upower -i /org/freedesktop/UPower/devices/battery_$(basename $BATTERY_PATH))
time_remaining=$(echo "$upower_info" | grep -E "time to empty|time to full" | awk '{print $4, $5}')

# Försök först läsa energy-rate direkt
power_draw_raw=$(echo "$upower_info" | grep "energy-rate" | awk '{print $2}')

# Om energy-rate är 0.00 eller tom, försök beräkna manuellt
if [[ -z "$power_draw_raw" || "$power_draw_raw" == "0" ]]; then
    voltage=$(echo "$upower_info" | grep "voltage" | awk '{print $2}')
    current=$(echo "$upower_info" | grep "current" | awk '{print $2}') # Kan heta "current (now)"
    
    # Kontrollera att vi har värden att räkna med
    if [[ -n "$voltage" && -n "$current" ]]; then
        # Använd 'bc' för flyttalsberäkning
        power_draw_calc=$(echo "$voltage * $current" | bc)
        power_draw=$(printf "%.2f W" "$power_draw_calc")
    else
        power_draw="0.00 W" # Fallback om vi inte kan beräkna
    fi
else
    power_draw=$(printf "%.2f W" "$power_draw_raw")
fi

# Bygg variablerna för text och tooltip
text_output="${icon} ${capacity}%"
tooltip_output="Status: ${status}\nTid kvar: ${time_remaining:-N/A}\nTotal förbrukning: ${power_draw:-N/A}"

# Skriv ut JSON med printf
printf '{"text": "%s", "tooltip": "%s", "class": "%s", "percentage": %d}\n' \
    "$text_output" \
    "$tooltip_output" \
    "$class" \
    "$capacity"

----------------------------------------
#./modules/home/kitty.nix
----------------------------------------
# modules/home/kitty.nix
{ config, pkgs, ... }:

{
  programs.kitty = {
    enable = true;

    settings = {
      font_family = "JetBrainsMono";
      font_size = 12;
      cursor_shape = "block";
      background_opacity = "0.65";
      background_blur = 64;
      window_border_width = 0;
      window_padding_width = 10;

      tab_bar_style = "separator";
      tab_powerline_style = "slanted";
      tab_bar_edge = "top";
      tab_title_max_length = 25;
      tab_title_template = " {title} ";
      tab_separator = " ";

      allow_remote_control = true;
      enabled_layouts = "splits";
      remember_window_size = false;
      initial_window_width = "75c";
      initial_window_height = "20c";
      confirm_os_window_close = 0;

      enable_audio_bell = false;
      "enabled_layouts tall:bias=50;full_size=1;mirrored=false" = "";
    };

    extraConfig = ''
      # Befintliga keymaps
      map ctrl+shift+t new_tab_with_cwd
      map ctrl+shift+n new_os_window_with_cwd

      # Automatisk inkludering av wal-färgfil
      #include ${config.home.homeDirectory}/.cache/wal/colors-kitty.conf
    '';
  };
}


----------------------------------------
#./modules/home/anders.nix
----------------------------------------
#./modules/home/anders.nix
{ config, pkgs, specialArgs, ... }: # <--- Ändrad signatur: tar emot specialArgs
let
  hostName = specialArgs.hostName; # Hämta hostName från specialArgs
in
{
  # Enable home manager programs
  programs.home-manager.enable = true;
  home.stateVersion = "25.05";

  # Kitty
  imports = [
    ./waybar.nix
    # Nu importerar vi hyprland.nix som en vanlig modul.
    # hostName är tillgängligt i hyprland.nix via dess egen specialArgs.
    ./hyprland.nix
    ./kitty.nix
    ./pywal.nix
    ./hyprpaper.nix
    ./config-files.nix
    ./scripts.nix
  ];

  # PATH och session-variabler
  home.sessionVariables = {
    PATH = "${config.home.homeDirectory}/.local/bin:${pkgs.stdenv.cc.cc}/bin:${pkgs.coreutils}/bin:${pkgs.git}/bin:${pkgs.gcc}/bin:${pkgs.bash}/bin";
  };

  # Exempel fontconfig (enkel, utan att skriva till xdg.configFile)
  home.file."${config.home.homeDirectory}/.config/fontconfig/conf.d/10-hm-fonts.conf".text = ''
    <?xml version="1.0"?>
    <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
    <fontconfig>
      <!-- Dina fontconfig-inställningar här -->
    </fontconfig>
  '';
}

----------------------------------------
#./modules/home/pywal.nix
----------------------------------------
{ config, pkgs, ... }:

{
  programs.pywal.enable = true;
}


----------------------------------------
#./modules/home/scripts.nix
----------------------------------------
# ~/nixos-config/modules/home/scripts.nix
{ config, pkgs, ... }:

{
  # --- Egna skript ---
  home.file.".local/bin/set-random-wallpaper" = {
    source = ./scripts/set-random-wallpaper.sh;
    executable = true;
  };

  home.file.".local/bin/waybar-network-vnstat" = {
    source = ./scripts/waybar-network-vnstat.sh;
    executable = true;
  };

  # --- Extra paket för skript ---
  home.packages = with pkgs; [
    iproute2
    iw
    jq
    vnstat
  ];

  # --- Systemd-tjänst och timer för wallpapers ---
  systemd.user.services.set-random-wallpaper = {
    Unit = { Description = "Set random wallpaper"; };
    Service = {
      ExecStart = "${config.home.homeDirectory}/.local/bin/set-random-wallpaper";
    };
  };

  systemd.user.timers.set-random-wallpaper = {
    Unit = { Description = "Run set-random-wallpaper every 5 minutes"; };
    Timer = {
      OnBootSec = "30s";
      OnUnitActiveSec = "5m";
      Unit = "set-random-wallpaper.service";
    };
    Install = { WantedBy = [ "timers.target" ]; };
  };
}


----------------------------------------
#./modules/home/hyprland.nix
----------------------------------------
#./modules/home/hyprland.nix
# Plats: modules/home/hyprland.nix
{ config, pkgs, specialArgs, ... }: # <--- Ändrad signatur: tar emot specialArgs
let
  hostName = specialArgs.hostName; # Hämta hostName från specialArgs
in
{
  # Se till att Hyprland är aktiverat i Home Manager också,
  # men utan att definiera några inställningar här.
  # Detta säkerställer att Home Manager vet att Hyprland används
  # och kan hantera t.ex. Waybar-integration korrekt.
  wayland.windowManager.hyprland.enable = true;

  # Skapa den slutgiltiga hyprland.conf i användarens hemkatalog
  # som inkluderar de systemgenererade filerna.
  xdg.configFile."hypr/hyprland.conf".text = ''
    # Denna fil hanteras av Home Manager.
    # Inkluderar system- och host-specifika Hyprland-konfigurationer.

    # Inkludera den generella bas-konfigurationen
    source = /etc/hypr/hyprland-base.conf

    # Inkludera den host-specifika konfigurationen
    source = /etc/hypr/hyprland-${hostName}.conf # <--- Använder hostName direkt

    # Eventuella ytterligare användarspecifika inställningar kan läggas till här
    # (men det är oftast bättre att hålla dem i de systemgenererade filerna för enkelhetens skull)
  '';
}

----------------------------------------
#./modules/home/hyprpaper.nix
----------------------------------------
----------------------------------------
#./modules/home/hyprland.nix
----------------------------------------
# Plats: modules/home/hyprland.nix
{ config, pkgs, hostName, ... }: # <--- ÄNDRA HÄR: Ta emot 'hostName' direkt

{
  # Se till att Hyprland är aktiverat i Home Manager också,
  # men utan att definiera några inställningar här.
  # Detta säkerställer att Home Manager vet att Hyprland används
  # och kan hantera t.ex. Waybar-integration korrekt.
  wayland.windowManager.hyprland.enable = true;

  # Skapa den slutgiltiga hyprland.conf i användarens hemkatalog
  # som inkluderar de systemgenererade filerna.
  xdg.configFile."hypr/hyprland.conf".text = ''
    # Denna fil hanteras av Home Manager.
    # Inkluderar system- och host-specifika Hyprland-konfigurationer.

    # Inkludera den generella bas-konfigurationen
    source = /etc/hypr/hyprland-base.conf

    # Inkludera den host-specifika konfigurationen
    source = /etc/hypr/hyprland-${hostName}.conf # <--- Använd hostName direkt

    # Eventuella ytterligare användarspecifika inställningar kan läggas till här
    # (men det är oftast bättre att hålla dem i de systemgenererade filerna för enkelhetens skull)
  '';
}

----------------------------------------
#./modules/home/config-files/wallpaper_dirs.txt
----------------------------------------
/home/anders/walls/abstract
/home/anders/walls/aerial
/home/anders/walls/apocalypse
/home/anders/walls/architecture
/home/anders/walls/calm
/home/anders/walls/centered
/home/anders/walls/chillop
/home/anders/walls/girl
/home/anders/walls/gruvbox
/home/anders/walls/industrial
/home/anders/walls/interior
/home/anders/walls/minimal
/home/anders/walls/monochrome
/home/anders/walls/pixel
/home/anders/walls/poly
/home/anders/walls/stalenhag
/home/anders/walls/unsorted

----------------------------------------
#./modules/home/waybar.nix
----------------------------------------
{ config, pkgs, ... }:

{
  programs.waybar = {
    enable = true;
    # du kan lägga in konfig här, eller använda `xdg.configFile`
  };

  xdg.configFile."waybar/config".source = ./waybar/config.jsonc;
  xdg.configFile."waybar/style.css".source = ./waybar/style.css;

  home.packages = with pkgs; [ jq ]; # ex. om du behöver extra paket
}

----------------------------------------
#./modules/home/config-files.nix
----------------------------------------
# Plats: modules/home/config-files.nix
{ config, ... }:
{
  # Detta block talar om för Home Manager att skapa filen
  # ~/.config/wallpaper_dirs.txt och att dess innehåll ska
  # komma från filen vi skapade i vår config-mapp.
  home.file.".config/wallpaper_dirs.txt" = {
    source = ./config-files/wallpaper_dirs.txt;
  };
  home.file.".config/default-wallpaper.jpg" = {
    source = ./assets/default.jpg;
  };
}


----------------------------------------
#./modules/home/scripts/waybar-network-vnstat.sh
----------------------------------------
#!/usr/bin/env bash
set -euo pipefail

# Hitta första aktiva interface
IFACE=$(ip -o -4 addr show up | awk '!/ lo / {print $2; exit}')
[ -z "$IFACE" ] && IFACE="wlan0"

# IP-adress
IPADDR=$(ip -4 addr show dev "$IFACE" 2>/dev/null | awk '/inet /{print $2}' | cut -d/ -f1 || echo "N/A")

# Wi-Fi info
IS_WIFI=0
ESSID=""
if [ -r /proc/net/wireless ] && grep -qE "^[[:space:]]*$IFACE:" /proc/net/wireless; then
  IS_WIFI=1
  ESSID=$(iwgetid "$IFACE" -r 2>/dev/null || echo "")
fi
[ -z "$ESSID" ] && ESSID="$IFACE"

SIGNAL="0"
if [ "$IS_WIFI" -eq 1 ]; then
  SIGNAL=$(grep -E "^[[:space:]]*$IFACE:" /proc/net/wireless | awk '{print int($3 * 100 / 70)}' 2>/dev/null || echo "0")
fi

ICON=""
[ -n "$IPADDR" ] && [ "$IPADDR" != "N/A" ] && ICON=$([ "$IS_WIFI" -eq 1 ] && echo "" || echo "")

# vnstat data
TODAY="N/A"
YESTERDAY="N/A"
VNDUMP=$(vnstat -i "$IFACE" 2>/dev/null || true)
if [ -n "$VNDUMP" ]; then
    TODAY=$(echo "$VNDUMP" | awk '/^ *today/ {print $2 " " $3 " / " $5 " " $6}')
    YESTERDAY=$(echo "$VNDUMP" | awk '/^ *yesterday/ {print $2 " " $3 " / " $5 " " $6}')
fi

# Skapa JSON
TEXT_JSON=$(echo -n "$ICON  $ESSID" | jq -Rs .)
TOOLTIP_JSON=$(echo -e "Interface: $IFACE\nIP: $IPADDR\nSignal: $SIGNAL%\nToday: $TODAY\nYesterday: $YESTERDAY" | jq -Rs .)
printf '{"text":%s,"tooltip":%s,"class":"net"}\n' "$TEXT_JSON" "$TOOLTIP_JSON"


----------------------------------------
#./modules/home/scripts/set-random-wallpaper.sh
----------------------------------------
#!/usr/bin/env bash
# ~/nixos-config/modules/home/scripts/set-random-wallpaper.sh

set -euo pipefail

DIR_FILE="$HOME/.config/wallpaper_dirs.txt"
if [[ ! -f "$DIR_FILE" ]]; then
    echo "Fel: $DIR_FILE hittades inte." >&2
    exit 1
fi

# Läs in bilder
mapfile -t images < <(
    while IFS= read -r dir; do
        expanded_dir=$(eval echo "$dir")
        if [[ -d "$expanded_dir" ]]; then
            find "$expanded_dir" -type f \( -iname '*.jpg' -o -iname '*.png' \)
        fi
    done < "$DIR_FILE"
)

if [[ ${#images[@]} -eq 0 ]]; then
    echo "Inga bilder hittades." >&2
    exit 1
fi

# Slumpa fram en bild
random_image=$(printf "%s\n" "${images[@]}" | shuf -n 1)
echo "Vald bakgrund: $random_image"

# Sätt bakgrund via hyprpaper
hyprctl hyprpaper unload all
hyprctl hyprpaper preload "$random_image"
hyprctl hyprpaper wallpaper ",$random_image"

# Kör wal utan output
wal -i "$random_image" -q -n 2>/dev/null || true

# ===== Waybar färg baserat på övre 5% av bilden =====
if command -v magick &>/dev/null || command -v convert &>/dev/null; then
    top_crop=$(identify -format "%[fx:h*0.05]" "$random_image" | cut -d. -f1)
    top_crop=$(( top_crop > 0 ? top_crop : 1 ))

    if command -v magick &>/dev/null; then
        luminance=$(convert "$random_image" -crop "100%x$top_crop+0+0" \
            -colorspace Gray -scale 1x1\! -format "%[fx:int(255*mean)]" info:)
    else
        luminance=$(convert "$random_image" -crop "100%x$top_crop+0+0" \
            -colorspace Gray -scale 1x1\! -format "%[fx:int(255*mean)]" info:)
    fi

    echo "Genomsnittlig luminans övre 5%: $luminance"
    if (( luminance > 128 )); then
        text_color="#000000"
    else
        text_color="#ffffff"
    fi
else
    echo "Imagemagick saknas, använder svart som fallback"
    text_color="#000000"
fi

echo "Waybar-text ska bli: $text_color"

# Waybar CSS – skriv till cache istället för nixos-hanterad config
WAYBAR_CSS="$HOME/.cache/waybar-color.css"
mkdir -p "$(dirname "$WAYBAR_CSS")"
# Anpassa tooltip bakgrund beroende på textfärgen
if [[ "$text_color" == "#000000" ]]; then
    tooltip_bg="#ffffff"  # ljus bakgrund för mörk text
else
    tooltip_bg="#222222"  # mörk bakgrund för ljus text
fi

cat > "$WAYBAR_CSS" <<EOF
* {
  color: $text_color;
}

tooltip {
  color: $text_color;
  background-color: $tooltip_bg;
}
EOF


# Signalera Waybar att läsa om CSS
pkill -SIGUSR2 waybar 2>/dev/null || true
echo "Waybar CSS reload signal skickad"

# ===== Kitty färg =====
KITTY_COLORS="$HOME/.cache/wal/colors-kitty.conf"
if [[ -f "$KITTY_COLORS" ]]; then
    echo "Kitty färger uppdaterade via $KITTY_COLORS"
else
    echo "⚠️ Kitty-färgfil saknas: $KITTY_COLORS"
fi

echo "Wallpaper, Waybar och Kitty-färg uppdaterad."


----------------------------------------
#./modules/common/utils.nix
----------------------------------------
# Plats: modules/common/utils.nix
{ config, pkgs, ... }:
{
  # Tjänster
  services.vnstat.enable = true;

  # Paket med verktyg
  environment.systemPackages = with pkgs; [
    # Systemverktyg
    vscode
    blueberry
    lm_sensors
    bluetui
    vnstat
    bc
    jq
    upower
    gawk
    coreutils
    findutils
    libnotify

    # Nätverksverktyg
    iwd
    iproute2
    wirelesstools
    iw
    impala # <-- LÄGG TILL DEN HÄR RADEN
  ];
}

----------------------------------------
#./modules/common/base.nix
----------------------------------------
# Plats: modules/common/base.nix
{ pkgs, ... }:
{
  # Grundläggande systeminställningar
  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  nixpkgs.config.allowUnfree = true;
  time.timeZone = "Europe/Stockholm";
  i18n.defaultLocale = "sv_SE.UTF-8";

  # Använd den senaste kärnan för bättre hårdvarustöd
  boot.kernelPackages = pkgs.linuxPackages_latest;

  # ===============================================================
  # == LÄGG TILL DETTA BLOCK FÖR NÄTVERKSHANTERING               ==
  # ===============================================================
  networking = {
    # Använd iwd för att hantera trådlösa nätverk
    wireless.iwd.enable = true;
    # Stäng av NetworkManager för att undvika konflikter
    networkmanager.enable = false;
  };

  services.upower.enable = true;

  # Ljud
  security.rtkit.enable = true;
  services.pipewire.enable = true;
  services.pipewire.alsa.enable = true;
  services.pipewire.pulse.enable = true;


  # Bluetooth
  hardware.bluetooth.enable = true;
  services.blueman.enable = true;

  # Diskhantering
  services.gvfs.enable = true;
  services.udisks2.enable = true;
  security.polkit.enable = true;

  # Användare "anders"
  users.users.anders = {
    isNormalUser = true;
    description = "Anders Hardenborg";
    extraGroups = [ "networkmanager" "wheel" ];
  };

  # Grundläggande paket som alla behöver
  environment.systemPackages = with pkgs; [
    vim
    git
    htop
    fastfetch
    btop
    nautilus
    adwaita-icon-theme
    home-manager
    kdePackages.kate
    sysstat
    sushi
    loupe
    gnome-decoder
    ffmpegthumbnailer
    glance
    nautilus
    gnome-disk-utility
    gnome.gvfs
    udisks2
  ];
}

----------------------------------------
#./modules/profiles/services.nix
----------------------------------------
# Plats: modules/profiles/services.nix
{ ... }:
{
  imports = [
    ../services/syncthing.nix
    ../services/tailscale.nix
  ];
}

----------------------------------------
#./modules/profiles/mediacenter.nix
----------------------------------------
{ ... }:
{
  imports = [
    ../services/ollama.nix
    ../desktop/mediaplayer.nix
  ];
}

----------------------------------------
#./modules/profiles/desktop.nix
----------------------------------------
# Plats: modules/profiles/desktop.nix
{ ... }:
{
  imports = [
    # Den nya modulen som aktiverar SDDM och den grafiska miljön
    ../desktop/environment.nix
    ../desktop/plymouth.nix


    # Dina befintliga moduler för programvara
    ../desktop/hyprland.nix
    ../desktop/theme.nix 
    ../desktop/browsers.nix
    ../desktop/chat.nix
    ../desktop/fonts.nix
    ../desktop/media-creation.nix
    ../desktop/mediaplayer.nix
    ../desktop/slicer.nix
    ../desktop/python.nix
    ../desktop/nix-ld.nix
    ../desktop/packages.nix
#    ../desktop/theme.nix # <-- LÄGG TILL DENNA RAD
  ];
}


----------------------------------------
#./modules/profiles/server.nix
----------------------------------------
# Plats: modules/profiles/server.nix
{ pkgs, ... }:

{
  # Utöka konfigurationen för användaren 'anders'
  users.users.anders = {
    # Lägg till SSH-nycklar för fjärråtkomst
    openssh.authorizedKeys.keys = [
      # laptop-intel
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINfBnuy7cFYKxy7J5LGISsdfAjlZ5JwjSnhYH5pMHKEE anders@workstation"
      # laptop-nvidia
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIK+0CO+m+DwjDfKda3M8m71uk/gvVR91+sb3QIdQZE/j anders@workstation"
    ];
    # Lägg till extra grupper som behövs på stationära datorer
    extraGroups = [ "libvirtd" ];
    # Lägg till extra paket som behövs på stationära datorer
    packages = with pkgs; [
      tree
    ];
  };

  # Konfigurera SSH-åtkomst för root-användaren
  users.users.root.openssh.authorizedKeys.keys = [
    ''from="192.168.2.0/24" ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHUTAWSpaVlajPf3IxFcZV7SN4JhyH9sQfpoP9k3RiyS root@core-ssh root@workstation''
  ];

  # Aktivera SSH-servern
  services.openssh.enable = true;
}

----------------------------------------
#./modules/desktop/mediaplayer.nix
----------------------------------------
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    plexamp
    plex-desktop
    jellyfin-media-player
    mpv
    vlc
    yt-dlp
  ];

}


----------------------------------------
#./modules/desktop/plymouth.nix
----------------------------------------
# Plats: modules/desktop/plymouth.nix
{ pkgs, ... }:

{
  boot = {
    # Aktivera Plymouth
    plymouth = {
      enable = true;
      theme = "loader_2";
      themePackages = with pkgs; [
        (adi1090x-plymouth-themes.override {
          selected_themes = [ "loader_2" ];
        })
      ];
    };

    # Inställningar för "Silent Boot" som fungerar med Plymouth
    consoleLogLevel = 3;
    initrd.verbose = false;
    kernelParams = [
      "quiet"
      "splash"
      "boot.shell_on_fail"
      "udev.log_priority=3"
      "rd.systemd.show_status=auto"
      "plymouth.use-initrd=true"
    ];

    # Nödvändigt för att Plymouth ska kunna visa LUKS-prompten grafiskt
    initrd.systemd.enable = true;
  };
}

----------------------------------------
#./modules/desktop/hyprland.nix
----------------------------------------
# Plats: modules/desktop/hyprland.nix (REN SYSTEM-MODUL)
{ pkgs, ... }:
{
  # Aktivera system-stödet för Hyprland
  programs.hyprland.enable = true;

  # Installera system-paket som behövs för en Hyprland-miljö
  # Notera: hyprpaper och andra användarprogram är borttagna härifrån
  environment.systemPackages = with pkgs; [
    rofi-wayland
    dunst
    pavucontrol
    brightnessctl
    hyprpicker
    hyprcursor
    blueman
    nwg-look
    graphite-gtk-theme
    kora-icon-theme
  ];
}

----------------------------------------
#./modules/desktop/environment.nix
----------------------------------------
# Plats: modules/desktop/environment.nix
{ pkgs, ... }:

{
  # Aktivera den grafiska miljön (XWayland-stöd etc.)
  services.xserver.enable = true;

  # Konfigurera tangentbordslayout för den grafiska miljön
  services.xserver.xkb = {
    layout = "se";
    variant = "";
  };

  # Konfigurera Display Manager (SDDM) med Wayland-stöd
  services.displayManager.sddm = {
    enable = true;
    autoNumlock = true;
    wayland.enable = true;
    # Detta tema måste finnas i environment.systemPackages någonstans
    # (vilket det gör i din base.nix eller hyprland.nix)
    theme = "sddm-sugar-dark";
    settings = {
      Autologin = {
        Session = "hyprland";
        User = "anders";
      };
    };
  };
}

----------------------------------------
#./modules/desktop/packages.nix
----------------------------------------
# Plats: modules/desktop/packages.nix
{ pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    # Detta är alla paket som tidigare låg i hyprland.nix
    kitty
    imagemagick
    rofi-wayland
    dunst
    jq
    pavucontrol
    playerctl
    brightnessctl
    hyprpaper # Installeras på systemnivå för att 'exec-once' ska hitta den
    hyprpicker
    hypridle
    hyprcursor
    pywal16
    nwg-look
    graphite-gtk-theme
    kora-icon-theme
    blueman
    unstable.waybar
    eww
    gtk3
    glib
    gdk-pixbuf
    pango
    cairo
    librsvg
    gtk-layer-shell
    dart-sass
  ];
}

----------------------------------------
#./modules/desktop/slicer.nix
----------------------------------------
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    orca-slicer
    cura-appimage
    prusa-slicer
  ];

}


----------------------------------------
#./modules/desktop/media-creation.nix
----------------------------------------
# Plats: modules/desktop/media-creation.nix

# Signaturen tar INTE emot 'inputs'
{ config, pkgs, ... }:

{
  environment.systemPackages = with pkgs; [ # 'with pkgs;' gör att vi kan skriva 'unstable' istället för 'pkgs.unstable'
    # 3D
    unstable.blender
    freecad
    openscad
    meshlab
    cloudcompare
    f3d

    # raster
    gimp-with-plugins # Notera: gimp3-with-plugins kan ha bytt namn till gimp-with-plugins
    krita

    # Vektor
    inkscape-with-extensions
    inkscape-extensions.inkstitch
  ];
}


----------------------------------------
#./modules/desktop/fonts.nix
----------------------------------------
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    jetbrains-mono
  ];

  # Fonts
  fonts.fontDir.enable = true;
  fonts.packages = with pkgs; [
    noto-fonts
    noto-fonts-cjk-sans
    noto-fonts-emoji
    jetbrains-mono
    nerd-fonts.jetbrains-mono
    fira-code
    fira-code-symbols
    mplus-outline-fonts.githubRelease
    dina-font
    proggyfonts
    font-awesome
  ];

}


----------------------------------------
#./modules/desktop/browsers.nix
----------------------------------------
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    firefox
    google-chrome
    chromium
    chromedriver
    ladybird
    brave
    bitwarden-desktop
  ];

}


----------------------------------------
#./modules/desktop/chat.nix
----------------------------------------
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    slack
    discord
  ];

}


----------------------------------------
#./modules/desktop/python.nix
----------------------------------------
{ config, pkgs, ... }:
{
  environment.systemPackages = with pkgs; [
    python313
    python313Packages.pip
  ];

}


----------------------------------------
#./modules/desktop/nix-ld.nix
----------------------------------------
{ config, lib, pkgs, ... }:
{
  programs.nix-ld.enable = true;
  programs.nix-ld.libraries = with pkgs; [
    libGL
    xorg.libX11
    xorg.libXrender
    xorg.libXxf86vm
    xorg.libXfixes
    xorg.libXi
    libxkbcommon
    xorg.libSM
    xorg.libICE
    xorg.libXrandr
    xorg.libXcursor
    xorg.libXinerama
    # Add any missing dynamic libraries for unpackaged programs
    # here, NOT in environment.systemPackages
  ];

}


----------------------------------------
#./modules/desktop/theme.nix
----------------------------------------
# Plats: modules/desktop/theme.nix
{ ... }:
{
  # Denna fil är nu tom. All temahantering sker i
  # /modules/home/pywal.nix, som hanteras av Home Manager.
}

----------------------------------------
#./modules/desktop/hyprland-base.nix
----------------------------------------
# Plats: modules/desktop/hyprland-base.nix
{ config, pkgs, ... }:

let
  # Definiera den generella Hyprland-konfigurationen som en sträng
  # Här använder vi en let-block för att hålla koden ren
  hyprlandBaseConfig = pkgs.lib.strings.concatStringsSep "\n" [
    "# Denna fil hanteras av NixOS. Ändra inte manuellt."
    "# Generella Hyprland-inställningar"
    ""
    "general {"
    "  gaps_in = 5"
    "  gaps_out = 15"
    "  border_size = 2"
    "  col.active_border = rgba(faffb4aa)"
    "  col.inactive_border = rgba(595959aa)"
    "  resize_on_border = false"
    "  allow_tearing = false"
    "  layout = dwindle"
    "}"
    ""
    "dwindle {"
    "  pseudotile = true"
    "  preserve_split = true"
    "}"
    ""
    "master.new_status = master"
    ""
    "misc {"
    "  force_default_wallpaper = -1"
    "  disable_hyprland_logo = true"
    "}"
    ""
    "input {"
    "  kb_layout = se"
    "  follow_mouse = 1"
    "  sensitivity = 0"
    "  touchpad.natural_scroll = true"
    "  numlock_by_default = true"
    "}"
    ""
    "gestures.workspace_swipe = true"
    ""
    "device {"
    "  name = epic-mouse-v1"
    "  sensitivity = -0.5"
    "}"
    ""
    "cursor {"
    "  inactive_timeout = 10"
    "  enable_hyprcursor = false"
    "}"
    ""
    "# DECORATION"
    "decoration {"
    "    rounding = 10"
    "    active_opacity = 1.0"
    "    inactive_opacity = 1.0"
    "    shadow {"
    "        enabled = true"
    "        range = 4"
    "        render_power = 3"
    "        color = rgba(1a1a1aee)"
    "    }"
    "    blur {"
    "        enabled = true"
    "        size = 8"
    "        passes = 2"
    "        new_optimizations = true"
    "        vibrancy = 0.1696"
    "    }"
    "}"
    ""
    "# ANIMATIONS"
    "animations {"
    "    enabled = yes"
    "    bezier = easeOutQuint,0.23,1,0.32,1"
    "    bezier = easeInOutCubic,0.65,0.05,0.36,1"
    "    bezier = linear,0,0,1,1"
    "    bezier = almostLinear,0.5,0.5,0.75,1.0"
    "    bezier = quick,0.15,0,0.1,1"
    "    animation = global, 1, 10, default"
    "    animation = border, 1, 5.39, easeOutQuint"
    "    animation = windows, 1, 4.79, easeOutQuint"
    "    animation = windowsIn, 1, 4.1, easeOutQuint, popin 87%"
    "    animation = windowsOut, 1, 1.49, linear, popin 87%"
    "    animation = fadeIn, 1, 1.73, almostLinear"
    "    animation = fadeOut, 1, 1.46, almostLinear"
    "    animation = fade, 1, 3.03, quick"
    "    animation = layers, 1, 3.81, easeOutQuint"
    "    animation = layersIn, 1, 4, easeOutQuint, fade"
    "    animation = layersOut, 1, 1.5, linear, fade"
    "    animation = fadeLayersIn, 1, 1.79, almostLinear"
    "    animation = fadeLayersOut, 1, 1.39, almostLinear"
    "    animation = workspaces, 1, 1.94, almostLinear, fade"
    "    animation = workspacesIn, 1, 1.21, almostLinear, fade"
    "    animation = workspacesOut, 1, 1.94, almostLinear, fade"
    "}"
    ""
    "# KEYBINDINGS (generella, utan multimedia)"
    "bind = $mainMod, RETURN, exec, ${pkgs.kitty}/bin/kitty"
    "bind = $mainMod, Q, killactive,"
    "bind = $mainMod, B, exec, ${pkgs.firefox}/bin/firefox"
    "bind = $mainMod, M, exit,"
    "bind = $mainMod CTRL, Q, exec, ~/.config/rofi/scripts/powermenu_t1"
    "bind = $mainMod, E, exec, ${pkgs.nautilus}/bin/nautilus"
    "bind = $mainMod, V, togglefloating,"
    "bind = $mainMod CTRL, F, fullscreen"
    "bind = $mainMod CTRL, RETURN, exec, ~/.config/rofi/scripts/launcher_t1"
    "bind = $mainMod, P, pseudo, # dwindle"
    "bind = $mainMod, J, togglesplit, # dwindle"
    ""
    "# Move focus"
    "bind = $mainMod, left, movefocus, l"
    "bind = $mainMod, right, movefocus, r"
    "bind = $mainMod, up, movefocus, u"
    "bind = $mainMod, down, movefocus, d"
    ""
    "# Switch workspaces"
    "bind = $mainMod, 1, workspace, 1"
    "bind = $mainMod, 2, workspace, 2"
    "bind = $mainMod, 3, workspace, 3"
    "bind = $mainMod, 4, workspace, 4"
    "bind = $mainMod, 5, workspace, 5"
    "bind = $mainMod, 6, workspace, 6"
    "bind = $mainMod, 7, workspace, 7"
    "bind = $mainMod, 8, workspace, 8"
    "bind = $mainMod, 9, workspace, 9"
    "bind = $mainMod, 0, workspace, 10"
    ""
    "# Move active window"
    "bind = $mainMod SHIFT, 1, movetoworkspace, 1"
    "bind = $mainMod SHIFT, 2, movetoworkspace, 2"
    "bind = $mainMod SHIFT, 3, movetoworkspace, 3"
    "bind = $mainMod SHIFT, 4, movetoworkspace, 4"
    "bind = $mainMod SHIFT, 5, movetoworkspace, 5"
    "bind = $mainMod SHIFT, 6, movetoworkspace, 6"
    "bind = $mainMod SHIFT, 7, movetoworkspace, 7"
    "bind = $mainMod SHIFT, 8, movetoworkspace, 8"
    "bind = $mainMod SHIFT, 9, movetoworkspace, 9"
    "bind = $mainMod SHIFT, 0, movetoworkspace, 10"
    ""
    "# Special workspace"
    "bind = $mainMod, S, togglespecialworkspace, magic"
    "bind = $mainMod SHIFT, S, movetoworkspace, special:magic"
    ""
    "# Scroll workspaces"
    "bind = $mainMod, mouse_down, workspace, e+1"
    "bind = $mainMod, mouse_up, workspace, e-1"
    ""
    "# Move/resize windows"
    "bindm = $mainMod, mouse:272, movewindow"
    "bindm = $mainMod, mouse:273, resizewindow"
    ""
    "# WINDOWS AND WORKSPACES"
    "layerrule = blur, rofi"
    "layerrule = blur, dunst"
    "layerrule = ignorezero, dunst"
    "windowrule = fullscreen, class:Waydroid, title:Waydroid"
    "windowrulev2 = suppressevent maximize, class:.*"
    "windowrulev2 = nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0"
  ];
in
{
  # Aktivera system-stödet för Hyprland
  programs.hyprland.enable = true; # Behåll denna för att installera Hyprland

  # Skriv den generella konfigurationen till /etc/hypr/hyprland-base.conf
  environment.etc."hypr/hyprland-base.conf".text = hyprlandBaseConfig;
}

----------------------------------------
#./modules/desktop/printing.nix
----------------------------------------
{ config, pkgs, ... }:
{
services.printing.enable = true;
}


----------------------------------------
#./modules/services/ollama.nix
----------------------------------------
{ config, pkgs, ... }:
{
  environment.systemPackages = [
    pkgs.ollama
  ];
services.ollama = {
  enable = true;
};
}


----------------------------------------
#./modules/services/tailscale.nix
----------------------------------------
{ config, pkgs, ... }:
{
  services.tailscale.enable = true;
  # ...

  environment.systemPackages = [
    pkgs.trayscale
  ];

  # create a oneshot job to authenticate to Tailscale
  systemd.services.tailscale-autoconnect = {
    description = "Automatic connection to Tailscale";

    # make sure tailscale is running before trying to connect to tailscale
    after = [ "network-pre.target" "tailscale.service" ];
    wants = [ "network-pre.target" "tailscale.service" ];
    wantedBy = [ "multi-user.target" ];

    # set this service as a oneshot job
    serviceConfig.Type = "oneshot";

    # have the job run this shell script
    script = with pkgs; ''
      # wait for tailscaled to settle
      sleep 2

      # check if we are already authenticated to tailscale
      status="$(${tailscale}/bin/tailscale status -json | ${jq}/bin/jq -r .BackendState)"
      if [ $status = "Running" ]; then # if so, then do nothing
        exit 0
      fi

      # otherwise authenticate with tailscale
      ${tailscale}/bin/tailscale up -authkey tskey-examplekeyhere
    '';
  };

}


----------------------------------------
#./modules/services/open-webui.nix
----------------------------------------
{ config, pkgs, lib, ... }:
{
  services.open-webui = {
    enable = true;
    host = "127.0.0.1"; # eller "0.0.0.0" om du vill nå den från andra enheter
    port = 8080;
    environment = {
      ENABLE_UPLOADS = "true";
      UPLOAD_DIR = "/var/lib/open-webui/uploads";
      ENABLE_RAG = "false";   # 🚀 stänger av vektorindexering
    };
  };
}


----------------------------------------
#./modules/services/syncthing.nix
----------------------------------------
{ config, pkgs, ... }:
{
  services = {
      syncthing = {
          enable = true;
          group = "users";
          user = "anders";
          dataDir = "/home/anders/Documents";    # Default folder for new synced folders
          configDir = "/home/anders/.config/syncthing";   # Folder for Syncthing's settings and keys
      };
  };}


----------------------------------------
#./modules/hardware/amd.nix
----------------------------------------
{ pkgs, ... }:
{
  # Enable AMD GPU support
  services.xserver.videoDrivers = [ "amdgpu" ];
  hardware.opengl.driSupport = true;
  hardware.graphics.enable = true;
  hardware.opengl.driSupport32Bit = true;
  # Enable AMD ROCm support
  systemd.tmpfiles.rules = 
  let
    rocmEnv = pkgs.symlinkJoin {
      name = "rocm-combined";
      paths = with pkgs.rocmPackages; [
        rocblas
        hipblas
        clr
      ];
    };
  in [
    "L+    /opt/rocm   -    -    -     -    ${rocmEnv}"
  ];

  # AMD specific packages
  environment.systemPackages = with pkgs; [ 
    unstable.blender-hip
  ];
}

----------------------------------------
#./modules/hardware/base.nix
----------------------------------------
{ pkgs, ... }:
{
  # Grundläggande systeminställningar
  nix.settings.experimental-features = [ "nix-command" "flakes" ];
  nixpkgs.config.allowUnfree = true;
  time.timeZone = "Europe/Stockholm";
  i18n.defaultLocale = "sv_SE.UTF-8";

  # Ljud
  security.rtkit.enable = true;
  services.pipewire.enable = true;
  services.pipewire.alsa.enable = true;
  services.pipewire.pulse.enable = true;

  # Användare "anders"
  users.users.anders = {
    isNormalUser = true;
    description = "Anders Hardenborg";
    extraGroups = [ "networkmanager" "wheel" ];
  };

  # Grundläggande paket som alla behöver
  environment.systemPackages = with pkgs; [
    vim
    git
    htop
    fastfetch
    btop
  ];
}

----------------------------------------
#./modules/hardware/intel.nix
----------------------------------------
{ pkgs, ... }:
{
  services.xserver.videoDrivers = [ "intel" ];
  hardware.graphics.enable = true;
  # Intel specific packages
  environment.systemPackages = with pkgs; [ 
    unstable.blender
  ];
}

----------------------------------------
#./modules/hardware/laptop.nix
----------------------------------------
{ config, pkgs, ... }:

# Använd en let-in-block för att definiera sökvägen till TLP en gång.
let
  # Detta ger oss den exakta sökvägen till tlp-binären i Nix-store.
  tlpPath = "${pkgs.tlp}/bin/tlp";
in
{
  # 1. Skapa ett skript som heter "ladda-fullt"
  environment.systemPackages = with pkgs; [
    (writeShellScriptBin "ladda-fullt" ''
      #!${pkgs.runtimeShell}
      echo "Instruerar TLP att ladda batteriet till 100% för denna session..."
      # Använd den fullständiga sökvägen till sudo och tlp för säkerhet och pålitlighet
      ${pkgs.sudo}/bin/sudo ${tlpPath} fullcharge BAT0
      echo "Klart! Batteriet kommer nu att ladda fullt. TLP återgår till normala inställningar efteråt."
    '')
  ];

  # 2. Tillåt din användare att köra kommandot utan lösenord
  security.sudo.extraRules = [
    {
      # Byt ut 'dittanvändarnamn' mot ditt faktiska användarnamn
      users = [ "anders" ];
      # Kommandot som tillåts köras som root utan lösenord
      commands = [
        {
          command = "${tlpPath} fullcharge BAT0";
          options = [ "NOPASSWD" ];
        }
      ];
    }
  ];

  # ... resten av din konfiguration, inklusive TLP-inställningarna ...
  services.tlp = {
    enable = true;
    settings = {
      START_CHARGE_THRESH_BAT0 = 75;
      STOP_CHARGE_THRESH_BAT0 = 80;
    };
  };

  services.power-profiles-daemon.enable = false; # Behåll denna för att undvika konflikter
}


----------------------------------------
#./modules/hardware/nvidia.nix
----------------------------------------
{ pkgs, ... }:
{
  services.xserver.videoDrivers = [ "nvidia" ];
  hardware.graphics.enable = true;
  hardware.nvidia.modesetting.enable = true;
  hardware.nvidia.open = false;
  # nvidia specific packages
  environment.systemPackages = with pkgs; [ 
    unstable.blender
  ];
}
}

